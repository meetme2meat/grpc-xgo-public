// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Companies defines model for Companies.
type Companies struct {
	CompanyType   string             `json:"companyType"`
	Description   string             `json:"description"`
	EmployeeCount int                `json:"employeeCount"`
	Id            openapi_types.UUID `json:"id"`
	Name          string             `json:"name"`
	Registered    bool               `json:"registered"`
}

// ContentIdResponse defines model for ContentIdResponse.
type ContentIdResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error error occurred
	Error *string `json:"error,omitempty"`
}

// CreateCompanyJSONRequestBody defines body for CreateCompany for application/json ContentType.
type CreateCompanyJSONRequestBody = Companies

// PatchCompanyJSONRequestBody defines body for PatchCompany for application/json ContentType.
type PatchCompanyJSONRequestBody = Companies

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// adds an new company
	// (POST /companies)
	CreateCompany(w http.ResponseWriter, r *http.Request)
	// delete an the company
	// (DELETE /companies/{id})
	DeleteCompany(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// retrieve the company detail
	// (GET /companies/{id})
	GetCompany(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// update an the company
	// (PATCH /companies/{id})
	PatchCompany(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateCompany operation middleware
func (siw *ServerInterfaceWrapper) CreateCompany(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCompany(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCompany operation middleware
func (siw *ServerInterfaceWrapper) DeleteCompany(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCompany(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompany operation middleware
func (siw *ServerInterfaceWrapper) GetCompany(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompany(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchCompany operation middleware
func (siw *ServerInterfaceWrapper) PatchCompany(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchCompany(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/companies", wrapper.CreateCompany)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/companies/{id}", wrapper.DeleteCompany)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/companies/{id}", wrapper.GetCompany)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/companies/{id}", wrapper.PatchCompany)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTW/jNhT8KwTboyzJabIfOtWbBlsD7WKx2aKH1geaepa4lUiWfLQjBP7vBUnZiiwH",
	"24PbFOjJlki+N5wZjvhIuWq1kiDR0uKRWl5Dy8LfW9VqJgWEB22UBoP9Ew9D3edOg3/E8EstGiEruk9o",
	"CZYboVEo6cfhgbW68VOWEsFIQGKBGV4TkJWQQJNpCWh1ozqAW+UkjorM8+N0IREqMH6+KMedyqu3+WYO",
	"MHvFb65n1+t8Pnubw6tZ+Tqfv75+s8nf3MxpQjfKtAxpQZ0T5TkckrUwrvxeqao5i9lAJSyCgTEWNA6O",
	"s9dKNcAk3Yf5fzoRZv9GQ/fQbEzfqOopLclIidWxiVp/AY4e0q2SCBKX5SewWkkLUzH/Geam2zsH784Y",
	"ZZ6HBn7Y/xkZKr4minNnelaO4O9VC1gLWZEdSCQ7o2R1FtwJFP9KyI2K7pbIeDRdy0RDC9op932nnJn1",
	"fKdctROj08+1sERYwogVHg9ZfFzShDaCQ7+96Ca60IzXQK7SnCbUGd+hRtRFlu12u5SF0VSZKuuX2uyn",
	"5e3dh/u72VWapzW2jW+OAsOe40HtyD2YreCHrlswNsKap3ma+wVKg2Ra0IJ+F14lVDOsA9MZH512ZXFK",
	"+6IsLWGS9BwQVARrILazCC0N5Q3zc5elR2WAIfTYaHQDWHynyu5AMsSTzbRuBA8rsy82RkbMIf/vWwMb",
	"WtBvsiGosj6lsiGi9vvouOiksImrfH7BRqfHKPQb83PghYedl57x6zyf8ijkljWiJEJqhwmJFiT922BO",
	"69qWmY4WlPWcS9gdePd2ZpX1p2oQbeWXDSJmj6Lcx84NIEwx/BDe+8rwICz6AzOUHwsZpw5CamZYCwjG",
	"Qzitq5m1wRUHMkI2iDiE9SHjiph3Q0LEjBzE+Fq6rCZi5y8jdk/wJbQuj5o8IfAZtRNawZkj+q4jXgEv",
	"p4hlmPaRagRDICpMswnplCOcSVIBkmEjyETzu5zo/x7wfyX+k0g5Fb2/tRiwrkGiNifkPXHBRbCMv45n",
	"8KxZSfpc9b1vzjvQX7lYQyyYLRgSv6lj5xlAI2ALI/H6PT3nP82Q19N2v+iS/c1g+egr/Bet9a9/qF4o",
	"u1zQ6iLZ5Y6yfz27wspgxnNK3+9YVYH50a39RYYsHCrys+J/iHCRGy5LtsiyrTAYK6U2Lqvd2t/Nsl/v",
	"Pi2WH7KHSmX99Wd1BHO8hg2g9qv9XwEAAP//WqLh+QoNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
